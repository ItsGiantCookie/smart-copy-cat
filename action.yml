name: 'smart-copy-cat'
description: 'Copies only trigger-specified paths to another repository'
author: 'ItsGiantCookie'
branding:
  icon: copy
  color: purple


inputs:
  output-repo:
    required: true
    description: 'Target repository in format owner/repo'
  output-branch:
    required: true
    description: 'Target branch name'
  path-pattern-to-prune:
    description: 'Path segment to remove (e.g. "src/")'
    default: ''
  path-pattern-to-insert:
    description: 'Replacement path segment (e.g. "dist/")'
    default: ''
  commit-message-prefix:
    default: '[Auto-Sync] '
    description: 'Prefix for commit messages'
  pr-title:
    default: 'Automated file sync'
    description: 'Title for the pull request'
  pr-message:
    default: 'Files copied via GitHub Actions'
    description: 'Description for the pull request'
  git-token:
    required: true
    description: 'PAT with repo write access'

runs:
  using: 'composite'
  steps:
    - name: Initialize environment
      shell: bash
      run: |
        echo "PR_BRANCH=copy-$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_ENV
        echo "TMP_SRCDIR=./source" >> $GITHUB_ENV
        echo "TMP_DSTDIR=./dest" >> $GITHUB_ENV

    - name: Checkout source repository
      uses: actions/checkout@v4
      with:
        path: ${{ env.TMP_SRCDIR }}
        fetch-depth: 0

    - name: Get changed files
      shell: bash
      run: |
        # Fallback method when trigger paths can't be extracted
        if [[ "${{ github.event_name }}" == "push" ]]; then
          if [[ "${{ github.event.before }}" == "0000000000000000000000000000000000000000" ]]; then
            # Initial commit - get all files
            git ls-files > changed_files.txt
          else
            # Regular push - get changed files
            git diff --name-only --diff-filter=AM ${{ github.event.before }} ${{ github.sha }} > changed_files.txt
          fi
        elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
          # PR event - get changed files
          git fetch origin ${{ github.event.pull_request.base.ref }}
          git diff --name-only --diff-filter=AM origin/${{ github.event.pull_request.base.ref }} HEAD > changed_files.txt
        else
          # Manual trigger - get all files
          git ls-files > changed_files.txt
        fi

        # Verify we have files to process
        if [ ! -s changed_files.txt ]; then
          echo "::warning::No files found to copy"
          exit 0
        fi

    - name: Checkout target repository
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.output-repo }}
        token: ${{ inputs.git-token }}
        path: ${{ env.TMP_DSTDIR }}

    - name: Configure Git
      shell: bash
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git config --global url."https://${{ inputs.git-token }}@github.com/".insteadOf "https://github.com/"

    - name: Prepare target branch
      working-directory: ${{ env.TMP_DSTDIR }}
      shell: bash
      run: |
        git checkout -b ${{ env.PR_BRANCH }}

    - name: Copy and transform files
      shell: bash
      run: |
        while IFS= read -r src_file; do
          if [ -f "${{ env.TMP_SRCDIR }}/$src_file" ]; then
            # Apply path transformation if patterns are specified
            if [[ -n "${{ inputs.path-pattern-to-prune }}" && -n "${{ inputs.path-pattern-to-insert }}" ]]; then
              dest_file=$(echo "$src_file" | sed "s|^${{ inputs.path-pattern-to-prune }}|${{ inputs.path-pattern-to-insert }}|")
            else
              dest_file="$src_file"
            fi
            
            # Create destination directory and copy file
            mkdir -p "${{ env.TMP_DSTDIR }}/$(dirname "$dest_file")"
            cp -v "${{ env.TMP_SRCDIR }}/$src_file" "${{ env.TMP_DSTDIR }}/$dest_file"
          fi
        done < changed_files.txt

    - name: Commit changes
      working-directory: ${{ env.TMP_DSTDIR }}
      shell: bash
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          git add -A
          git commit -m "${{ inputs.commit-message-prefix }}Copied files from ${{ github.repository }}"
          git push origin ${{ env.PR_BRANCH }}
        else
          echo "::notice::No changes to commit"
          exit 0
        fi

    - name: Create pull request
      shell: bash
      run: |
        curl -X POST \
          -H "Authorization: Bearer ${{ inputs.git-token }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ inputs.output-repo }}/pulls" \
          -d '{
            "title": "${{ inputs.pr-title }}",
            "head": "'${{ env.PR_BRANCH }}'",
            "base": "'${{ inputs.output-branch }}'",
            "body": "${{ inputs.pr-message }}\n\nSource: ${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}"
          }'
