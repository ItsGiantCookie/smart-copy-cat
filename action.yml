name: 'smart-copy-cat'
description: 'Copies only trigger-specified paths to another repository'
author: 'ItsGiantCookie'
branding:
  icon: copy
  color: purple

inputs:
  output-repo:
    required: true
    description: 'Target repository in format owner/repo'
  output-branch:
    required: true
    description: 'Target branch name'
  path-pattern-to-prune:
    description: 'Path segment to remove'
    default: ''
  path-pattern-to-insert:
    description: 'Path segment to insert'
    default: ''
  commit-message-prefix:
    default: '[Auto-Sync] '
  pr-title:
    default: 'Automated file sync'
  pr-message:
    default: 'Files copied via GitHub Actions'
  git-token:
    required: true

runs:
  using: 'composite'
  steps:
    - name: Initialize environment
      shell: bash
      run: |
        echo "PR_BRANCH=copy-$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_ENV
        echo "TMP_SRCDIR=./source" >> $GITHUB_ENV
        echo "TMP_DSTDIR=./dest" >> $GITHUB_ENV

    - name: Checkout source repository
      uses: actions/checkout@v4
      with:
        path: ${{ env.TMP_SRCDIR }}
        fetch-depth: 0

    - name: Extract workflow paths
      shell: bash
      run: |
        WORKFLOW_FILE="${{ env.TMP_SRCDIR }}/.github/workflows/${{ github.workflow }}"
        
        # Extract paths from workflow file
        awk '/paths:/{flag=1;next} /\]/{flag=0} flag' "$WORKFLOW_FILE" | 
          grep -Eo '-\s+['\''"]?.*['\''"]?' | 
          sed -E "s/^-\s+['\"]?(.*)['\"]?/\1/" > trigger_paths.txt
        
        # Convert glob patterns to regex
        sed -i 's/\*\*/.*/g; s/\./\\\./g; s/\//\\\//g' trigger_paths.txt
        PATHS_FILTER=$(paste -sd '|' trigger_paths.txt)
        echo "PATHS_FILTER=$PATHS_FILTER" >> $GITHUB_ENV

    - name: Get matching files
      shell: bash
      run: |
        # Get files based on event type
        if [[ "${{ github.event_name }}" == "push" ]]; then
          git diff --name-only --diff-filter=AM ${{ github.event.before }} ${{ github.sha }}
        else
          git ls-files
        fi > changed_files.txt
        
        # Apply path filter
        grep -E "${{ env.PATHS_FILTER }}" changed_files.txt > filtered_files.txt || true
        
        if [ ! -s filtered_files.txt ]; then
          echo "::warning::No matching files found to copy"
          exit 0
        fi
        mv filtered_files.txt changed_files.txt

    - name: Checkout target repository
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.output-repo }}
        token: ${{ inputs.git-token }}
        path: ${{ env.TMP_DSTDIR }}

    - name: Configure Git
      shell: bash
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git config --global url."https://${{ inputs.git-token }}@github.com/".insteadOf "https://github.com/"

    - name: Prepare target branch
      working-directory: ${{ env.TMP_DSTDIR }}
      shell: bash
      run: |
        git checkout -b ${{ env.PR_BRANCH }}

    - name: Copy and transform files
      shell: bash
      run: |
        while IFS= read -r src_file; do
          dest_file=$(echo "$src_file" | sed "s|^${{ inputs.path-pattern-to-prune }}|${{ inputs.path-pattern-to-insert }}|")
          mkdir -p "${{ env.TMP_DSTDIR }}/$(dirname "$dest_file")"
          cp -v "${{ env.TMP_SRCDIR }}/$src_file" "${{ env.TMP_DSTDIR }}/$dest_file"
        done < changed_files.txt

    - name: Commit changes
      working-directory: ${{ env.TMP_DSTDIR }}
      shell: bash
      run: |
        git add -A
        git commit -m "${{ inputs.commit-message-prefix }}Copied files from ${{ github.repository }}"
        git push origin ${{ env.PR_BRANCH }}

    - name: Create pull request
      shell: bash
      run: |
        curl -X POST \
          -H "Authorization: Bearer ${{ inputs.git-token }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ inputs.output-repo }}/pulls" \
          -d '{
            "title": "${{ inputs.pr-title }}",
            "head": "'${{ env.PR_BRANCH }}'",
            "base": "'${{ inputs.output-branch }}'",
            "body": "${{ inputs.pr-message }}\n\nSource: ${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}"
          }'
